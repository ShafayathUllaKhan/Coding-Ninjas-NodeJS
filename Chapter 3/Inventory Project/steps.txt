index.js
controller product js
model product js


ejs npm i ejs --> after installing set the ejs


server.set('viewengine','ejs');
server.set('views',path.join(path.resolve(),'src','views'))


layouts npm i express-ejs-layouts--> after installing set the ejs
import ejsLayouts from 'express-ejs-layouts'
server.use(ejsLayouts)

to get req.body use
server.use(express.urlencoded({extended : true}))

validation 
you can use in controller
you can create middleware
you can install third party validator or package for validation

npm i express-validator

create rules 
const rules = [
        body('name').notEmpty().withMessage('Name is required'),
        body('price').isFloat({gt:0}).withMessage('Price should '),
        body('imageUrl').isURL().withMessage('Invalid url')
    ];

// 2. run those rules.
    await Promise.all(rules.map(rules => rules.run(req)));
    
// 3. check if there are any errors after running the rules.
    var ValidationErors = validationResult(req);

 if(!ValidationErors.isEmpty()){
            return res.render('new-product',{errorMessage : ValidationErors.array()[0].msg});
        }

// updating product

// file upload for image from file manager

1. use third party library multer
2. changes in view
<input type="file" class="form-control" id="imageUrl" name="imageUrl" accept="images/*">

<form action="/" method="post" enctype="multipart/form-data">


3. middleware to handle files
4. Apply that middleware
5. Update controller to update urls of images

 body('imageUrl').custom((value,{req})=>{
            if(!req.file){
                throw new Error("Invalid Image")
            }
            return true;
        })

 const {name,desc,price} = req.body;
        const imageUrl = "images/" + req.file.filename;


// sessions

server --> sessions
client --> cookies

http -> stateless


// products page gets display we use session so after login only product page should display

use is used for application middleware

npm i express-session
after installing session
then use session function which takes object
{
    secret: 'SecretKey',
    resave : flase,
    saveUninitialized: true,
    cookie :{
        secure : false
    }
}

logout(req,res){
        // on log out, destroy the session
        req.session.destroy((err)=>{
            if(err){
                console.log('session destroy err ',err);
            }else{
                res.redirect('/login');
            }
        })
        res.clearCookie('lastVisit');
    }


// logout and clearing session


// you can create your own cookies --> continue watching in netflix this feature can be stored in cookies

to create cookie first install
npm i cookie-parser

server.use(cookieParser()); // req.cookies res.cookie

server.use(setLastVisit);


export const setLastVisit = (req,res,next)=>{

    // 1. if cookie is set , then add a local variable with last visit time data.
    if(req.cookies.lastVisit){
        res.locals.lastVisit = new Date(req.cookies.lastVisit).toLocaleString();
    }
    res.cookie('lastVisit',new Date().toISOString(),{
        maxAge : 2*24*60*1000
    });
    next();
}
































































steps for creating or practice project

1. first create a server
2. create folder structure src in src mvc
3. create a model using class with constructor and array
4. create a layout and install ejs and the express ejs layout